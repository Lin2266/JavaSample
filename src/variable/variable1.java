package variable;


/*
記憶體與變數生命期:
1.Java 程式的各個組件 (變數, 函式, 物件) 都存活於記憶體的兩個地方 :

堆疊 (Stack) : 先進後出,包括 :區域變數函式及其引數
堆積 (Heap) : 實體變數, 物件(字串會在heap建立字串(常數)儲存池 (String constant pool)存放，(String,StringBuilder, StringBuffer))
全球 (Global) :類別變數static(靜態變數)

2.Java 程式使用記憶體是從宣告開始, 宣告 (變數, 函式, 物件) 的動作是要求作業系統配置可用之記憶體空間給所宣告的變數, 物件, 或函式使用.

3.基本型態的變數 :
基本型別的變數宣告後, 就會獲得記憶體配置 (依基本型別不同而配置不同大小之記憶體), 馬上可以使用. 

區域變數 :
區域變數宣告時不會自動賦予預設值, 必須經過初始化賦值後才可取用

實體變數 :
實體變數宣告時會依據型別不同而自動賦予預設值, 所以可以直接取用,不論是區域或實體變數, 使用前都應先初始化為宜.

4.物件
5.變數種類與生命期 :
所謂區域變數 (Local variable) 指的是方法變數及區塊變數, 它們宣告後沒有預設值, 因此使用前必須先初始化.
只有類別變數與實體變數可以加上存取修飾子, 以決定是否開放給其他類別存取. 而區域變數只限方法或區塊內存取, 外部無法存取, 因此不可以加上任何存取修飾詞.

類別變數 (靜態變數) : Class variable :
1.類別變數一定要有 static 修飾詞, 故又稱為靜態變數
2.類別變數生命期最長, 只要程式一開始執行或載入就存在, 直到程式被關閉
3.可以加存取修飾詞
4.必須宣告在類別區塊內 (與實體變數一樣)
5.基本型別的類別變數宣告時即使不初始化, 也會依據資料型別賦予預設初始值
6.類別變數依附在類別上, 屬於類別本身, 由此類別之所有物件實體共用, 生命期最長,程式執行時期均可存取.
7.類別變數直接利用類別名稱存取, 語法為類別名稱.變數名稱

實體變數 : Instance variable
實體變數即物件的欄位, 或屬性, 依附在物件實體上
實體變數生命期次長, 只要物件實體產生就存在, 直到被指向 null 被 GC 回收為止.
在類別外部可以透過物件名稱存取, 在類別內可以用 this 存取.
可以加存取修飾詞.
基本型別的實體變數宣告時即使不初始化, 也會依據資料型別賦予預設初始值
必須於類別區塊內宣告, 且不可以加上 static 修飾詞 (這樣就變成類別變數了).

方法變數 (函式變數) : Method variable
方法變數包括宣告在小括號裡的引數與大括號裡的區域變數
方法變數生命期只有在方法被呼叫時才存在, 呼叫完畢即結束
依附於函式, 當函式呼叫結束, 方法變數之生命期即結束.
沒有預設初始值, 所以取用前必須初始化, 否則編譯失敗.
因為只能在方法內部存取, 故不可以加存取修飾詞, 否則會編譯失敗.
建構子內的變數視同方法變數. 

區塊變數 (Block variable) :
宣告於 if, switch, while, for 等指令的小括號或大括號區塊內, 出了區塊生命期即結束
沒有預設初始值, 所以取用前必須初始化, 否則編譯失敗.
因為只能在區塊內部存取, 故不可以加存取修飾詞, 否則會編譯失敗.
*/
public class variable1 {
    //實體變數 :實體變數宣告時會依據型別不同而自動賦予預設值, 所以可以直接取用,不論是區域或實體變數, 使用前都應先初始化為宜.
    int b; //int預設為0
    
    public int getB(){
        return b;
    }
    public static void main(String[] args) {
        variable1 v = new variable1();//實體化variable1類別
        System.out.println(v.getB());
        
        
    }
    
}
